[ 문자 함수 ]
< LOWER(문자열) >
: 문자열을 소문자로 변환한다.
ex) LOSER('SQL Course') → sql course 

 <UPPER(문자열) >
: 문자열을 대문자로 변환한다.
ex) UPPER('SQL Course') → SQL COURSE

< INITCAP(문자열) >
: 첫 문자만 대문자로 변환, 나머지는 소문자로
ex) INITCAP('SQL Course') → Sql Course
 
  
SQL> select first_name, lower(first_name), upper(first_name), initcap(first_name)
     from employees;

>OUTPUT
FIRST_NAME  LOWER(FIRST_NAME) UPPER(FIRST_NAME) INITCAP(FIRST_NAME)
----------- ----------------- ----------------- -------------------
Ellen        ellen             ELLEN             Ellen
Sundar       sundar            SUNDAR            Sundar
Mozhe        mozhe             MOZHE             Mozhe
David        david             DAVID             David
Hermann      hermann           HERMANN           Mermann


▶ 이름이 'Amit'인 사원의 정보를 검색할 때
SQL> select employee_id, first_name, department_id, salary
     from employees
     where first_name = 'amit';

>OUTPUT
no rows selected


SQL> select employee_id, first_name, department_id, salary
     from employees
     where lower(first_name) = 'amit';
     
>OUTPUT
EMPLOYEE_ID FIRST_NAME  DEPARTMENT_ID SALARY
----------- ----------- ------------- ------
        167  Amit                  80 6200



< CONCAT(문자열1, 문자열2) >
: 두 개의 문자열을 연결한다. (연결 연산자와 비슷한 기능)
ex) CONCAT('Hello', 'World') → HelloWorld

SQL> select first_name, last_name, concat(first_name, last_name)
     from employees;
>OUTPUT
FIRST_NAME  LAST_NAME CONCAT(FIRST_NAME,LAST_NAME)
----------- --------- ----------------------------
Ellen       Abel       EllenAbel
Sundar      Ande       SundarAnde
Mozhe       Atkinson   MozheAtkinson
David       Austin     DavidAustin
Hermann     Baer       HermannBaer

: 이와 같은 동일한 작업을 할 경우 함수보다 연결 연산자(||) 성능이 더 좋음


< SUBSTR(문자열, 시작위치, 출력문자 개수) >
: 문자열 내에서 지정된 위치의 문자열을 반환한다.
ex) SUBSTR('HelloWrold',2,5) → elloW

SQL> select first_name, substr(first_name,3), substr(first_name,-3), substr(first_name,2,5), substr(first_name,-5,3)
     from employees;
>OUTPUT
FIRST_NAME  SUBSTR(FIRST_NAME,3)  SUBSTR(FIRST_NAME,-3) SUBSTR(FIRST_NAME,2,5)  SUBSTR(FIRST_NAME,-5,3)
----------- --------------------- --------------------- ----------------------- ------------------------
Ellen       len                   len                   llen                    Ell
Sundar      ndar                  dar                   undar                   und
Mozhe       zhe                   zhe                   ozhe                    Moz
David       vid                   vid                   avid                    Dav
Hermann     rmann                 ann                   erman                   rma

: 시작 위치가 '-' 인 경우 문자열의 끝에서부터 위치를 정함


< LENGTH(문자열) >
: 문자열의 길이를 반환한다.
ex)  LENGTH('HelloWorld') → 10

SQL> select first_name, length(first_name)
     from employees;
>OUTPUT
FIRST_NAME  LENGTH(FIRST_NAME)
----------- ------------------
Ellen                       5
Sundar                      6
Mozhe                       5
David                       5
Hermann                     7


< INSTR(문자열, 검색문자, [시작위치, [횟수]]) >
: 지정된 문자의 위치를 리턴한다.
ex) INSTR('HelloWorld','o') → 5

SQL> select instr('database', 'a'), instr('database', 'a', 3), instr('database', 'a', 1, 3)
     from dual;
>OUTPUT
Instr('DATABASE','A') INSTR('DATABASE','A',3) INSTR('DATABASE','A',1,3)
--------------------- ----------------------- -------------------------
                    2                      4                         6
 
 : 시작위치, 횟수 미입력 시 기본값은 모두 1
 : 문자열에서 첫 번째 'a'의 위치
 : 문자열에서 세 번째부터 검색한 'a'의 위치
 : 문자열에서 첫 번째부터 검색한 세 번째 'a'의 위치
                    

< TRIM([leading | trailing | both] 제외 문자 FROM 문자열) >
: 접두어나 접미어를 잘라낸다.
ex) TRIM('H' FROM 'HelloWorld') → elloWorld

sQL> select trim('r' from 'register'), trim(leading 'r' from 'register'), trim(trailing 'r' from 'register')
     from dual;
>OUTPUT
TRIM('R'FROM'REGISTER') TRIM(LEADING'R'FROM'REGISTER')  GRIM(TRALING'R'FROM'REGISTER')
----------------------- ------------------------------- -------------------------------
egiste                  egister                          registe

: 기본값 = both
: 문자열의 'r'이라는 접두어와 접미어 잘라냄
: 접두어 잘라냄
: 접미어 잘라냄
: 제외 문자는 한 글자만 가능
ex) trim('re' from 'register') ----- (X)


< LPAD(문자열, 출력길이, 채울문자) / RPAD(문자열, 출력길이, 채울문자) >
: 지정된 문자열의 길이만큼 빈부분에 문자를 채운다.
ex) LPAD('World', 10, '*') → *****World / RPAD('World', 10, '*') → World*****

SQL> select first_name, rpad(first_name, 10, '#'), lpad(first_name, 10, '#')
     from employees;
>OUTPUT
FIRST_NAME  LOWER(FIRST_NAME) UPPER(FIRST_NAME)
----------- ----------------- -----------------
Ellen        Ellen#####        #####Ellen
Sundar       Sundar####        ####Sundar
Mozhe        Mozhe#####        #####Mozhe
David        David#####        #####David
Hermann      Hermann###        ###Hermann



< TRANSLATE(문자열, 검색문자, 치환문자) >
: 문자 단위 치환된 값 리턴
ex) TRANSLATE('hello', 'e', '*') → h*llo


< REPLACE(문자열, 시작위치, 출력문자 개수) >
: 문자열 단위 치환된 값 리턴
ex) REPLACE('hello', 'el', '**')  → h**lo

SQL> select translate('hello world', 'lo', '**') translate, replace('hello world', 'lo', '**') replace
     from dual;
>OUTPUT
TRANSLATE     REPLACE
------------- ------------
he*** w*r*d   hel** world

: TRANSLATE는 'l'과 'o' 각가의 문자를 '*'로 치환
: REPLACE는 'lo'라는 문자열을 '**'문자열로 치환

SQL> select translate('hello world', 'lo', '$*') translate
     from dual
>OUTPUT
TRANSLATE
------------
he$$* w*r$d

: 문자 'l'은 '$'로 치환, 'o'은 '*'로 치환


< DUAL table >
select문에는 반드시 from절이 있어야 함
10*30은 테이블에서 데이터를 가져오는 것이 아니므로 from 절에 기술할 테이블이 없음
이럴 때 DUMMY 테이블인 DUAL사용

SQL> select 10*20
     from dual;
>OUTPUT
10*30
-----
  300



[ 숫자 함수 ]
< ROUND(m, n) >
: m을 n 자리까지 반올림한다.
ex) ROUND(45.926, 2) → 45.93

SQL> select round(45.923, 2), round(45.923, 0), round(45.923, -1)
     from dual;
>OUTPUT
ROUND(45.923,2)  ROUND(45.923,0)  ROUND(45.923,-1)
--------------- ----------------- -----------------
          45.92               46                50
          
  : ROUND 함수 자리수는 소수점을 기준으로 함
  : 1 = 소수점 첫 째 자리 / 0 = 1의 자리(생략o) / -1 = 10의 자리 / -2 = 100의 자리


< TRUNC(m, n) >
: m을 n 자리 미만을 버린다.
ex) TRUNC(45.926, 2)  → 45.9

SQL> select trunc(45.923, 2), trunc(45.923), trunc(45.923, -1)
     from dual;
>OUTPUT
TRUNC(45.923,2) TRUNC(45.923) TRUNC(45.923,-1)
--------------- ------------- -----------------
         45.92            45                40
  
  : 소수점 기준 (ROUND 함수와 동일)
  

< MOD(m, n) >
: m을 n으로 나눈 나머지를 계산한다.
ex) MOD(1600, 300) → 100

SQL> select first_name, salary, mod(salary, 4000)
   from employees
   where job_id = 'SA_REP';
>OUTPUT
FIRST_NAME  SALARY  MOD(SALARY,4000)
----------- ------- ----------------
Peter        10000             2000
David         9500             1500
Peter         9000             1000
Christopher   8000                0
Nanette       7500             3500


< CEIL(n) >
: n보다 큰 가장 작은 정수를 찾는다.
ex) CEIL(12.34) → 13


< FLOOR(n) >
: n보다 작은 가장 큰 정수를 찾는다.
ex) FLOOR(12.34) → 12

SQL> select ceil(45.923), floor(45.923), ceil(-45.923), floor(-45.923)
     from dual;
>OUTPUT
CEIL(45.923)  FLOOR(45.923)  CEIL(-45.923)  FLOOR(-45.923)
------------- ------------- --------------- --------------
          46            45             -45            -46


< POWER(m, n) >
: m의 n승을 계산한다.
ex) POWER(2, 3) → 8


< ABS(n) >
: n의 절대 값을 계산한다.
ex) ABS(-3) → 3


< SQRT(n) >
: n의 제곱근을 계산한다.
ex) SQRT(4) → 2


< SIGN(n) >
:  n이 음수일 때 -1, 양수일 때 1, 0일 때 0을 반환한다.
ex) SIGN(-5) → -1



